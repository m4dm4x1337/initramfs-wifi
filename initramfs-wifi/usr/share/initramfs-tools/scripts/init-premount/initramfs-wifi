#!/bin/sh

# Initramfs-Wifi (init-premount script)
# Copyright (C) 2023 m4dm4x1337
#
# This file is part of the initramfs-wifi debian package.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#quiet=n

PREREQ=""

prereqs() {
  echo "${PREREQ}"
}

case "$1" in
  prereqs)
    prereqs
    exit 0
    ;;
esac

# import /usr/share/initramfs-tools/scripts/functions
. /scripts/functions

# show begin msg
log_begin_msg "Starting wpa_supplicant"

# parse kernel boot command line
INITRAMFS_WIFI=
for CMD_PARAM in $(cat /proc/cmdline); do
  case ${CMD_PARAM} in
    initramfs[-.]wifi=*)
      INITRAMFS_WIFI=${CMD_PARAM#initramfs[-.]wifi=}
      ;;
  esac
done

# check if initramfs-wifi is disabled
if [ "$INITRAMFS_WIFI" = "0" -o "$INITRAMFS_WIFI" = "no" -o "$INITRAMFS_WIFI" = "disabled" ]; then
  log_warning_msg "disabled, found kernel parameter initramfs-wifi=$INITRAMFS_WIFI"
  exit 0
fi

# parse wpa_supplicant.conf
if [ -s /etc/wpa_supplicant.conf ]; then
  QUOTES="'\""
  while IFS= read -r LINE || [ -n "$LINE" ]; do
    LINE="${LINE%%#*}" # strip comment
    LINE="${LINE#"${LINE%%[![:space:]]*}"}" # ltrim spaces
    LINE="${LINE%"${LINE##*[![:space:]]}"}" # rtrim spaces
    VALUE="${LINE#*=}" # extract value
    VALUE="${VALUE#"${VALUE%%[!$QUOTES]*}"}" # ltrim quotes
    VALUE="${VALUE%"${VALUE##*[!$QUOTES]}"}" # rtrim quotes
    case "$LINE" in
        ap_scan=*) WPA_SUPPLICANT_AP_SCAN="$VALUE" ;;
        country=*) WPA_SUPPLICANT_COUNTRY="$VALUE" ;;
      scan_ssid=*) WPA_SUPPLICANT_SCAN_SSID="$VALUE" ;;
           ssid=*) WPA_SUPPLICANT_SSID="$VALUE" ;;
            psk=*) WPA_SUPPLICANT_PSK="$VALUE" ;;
    esac
  done < /etc/wpa_supplicant.conf
fi

# this variable act as some kind of hash and is used to detect whether settings have been overwritten via the kernel cmdline.
WPA_SUPPLICANT_CONFIG="$WPA_SUPPLICANT_AP_SCAN:$WPA_SUPPLICANT_COUNTRY:$WPA_SUPPLICANT_SCAN_SSID:$WPA_SUPPLICANT_SSID:$WPA_SUPPLICANT_PSK"

# parse kernel boot command line
for CMD_PARAM in $(cat /proc/cmdline); do
  case ${CMD_PARAM} in
    wpa_supplicant.ap_scan=*)   WPA_SUPPLICANT_AP_SCAN="${CMD_PARAM#wpa_supplicant.ap_scan=}" ;;
    wpa_supplicant.country=*)   WPA_SUPPLICANT_COUNTRY="${CMD_PARAM#wpa_supplicant.country=}" ;;
    wpa_supplicant.scan_ssid=*) WPA_SUPPLICANT_SCAN_SSID="${CMD_PARAM#wpa_supplicant.scan_ssid=}" ;;
    wpa_supplicant.ssid=*)      WPA_SUPPLICANT_SSID="${CMD_PARAM#wpa_supplicant.ssid=}" ;;
    wpa_supplicant.psk=*)       WPA_SUPPLICANT_PSK="${CMD_PARAM#wpa_supplicant.psk=}" ;;
    wpa_supplicant.debug=*)     WPA_SUPPLICANT_DEBUG="${CMD_PARAM#wpa_supplicant.debug=}" ;;
    wpa_supplicant.dumpconf=*)  WPA_SUPPLICANT_DUMPCONF="${CMD_PARAM#wpa_supplicant.dumpconf=}" ;;
    wpa_supplicant.dumplogs=*)  WPA_SUPPLICANT_DUMPLOGS="${CMD_PARAM#wpa_supplicant.dumplogs=}" ;;
    wpa_supplicant.interface=*) WPA_SUPPLICANT_INTERFACE="${CMD_PARAM#wpa_supplicant.interface=}" ;;
    wpa_supplicant.timeout=*)   WPA_SUPPLICANT_TIMEOUT="${CMD_PARAM#wpa_supplicant.timeout=}" ;;
  esac
done

# re-write the config file if some settings have been overwritten via the kernel cmdline
if [ "$WPA_SUPPLICANT_CONFIG" != "$WPA_SUPPLICANT_AP_SCAN:$WPA_SUPPLICANT_COUNTRY:$WPA_SUPPLICANT_SCAN_SSID:$WPA_SUPPLICANT_SSID:$WPA_SUPPLICANT_PSK" ]; then
[ -n "$WPA_SUPPLICANT_AP_SCAN"   ] || COMMENT_WPA_SUPPLICANT_AP_SCAN='#'
[ -n "$WPA_SUPPLICANT_COUNTRY"   ] || COMMENT_WPA_SUPPLICANT_COUNTRY='#'
[ -n "$WPA_SUPPLICANT_SCAN_SSID" ] || COMMENT_WPA_SUPPLICANT_SCAN_SSID='#'
cat << CONFIG > /etc/wpa_supplicant.conf
ctrl_interface=/run/wpa_supplicant
${COMMENT_WPA_SUPPLICANT_AP_SCAN}ap_scan=${WPA_SUPPLICANT_AP_SCAN:-1}
${COMMENT_WPA_SUPPLICANT_COUNTRY}country=${WPA_SUPPLICANT_COUNTRY}

network={
  ${COMMENT_WPA_SUPPLICANT_SCAN_SSID}scan_ssid=${WPA_SUPPLICANT_SCAN_SSID:-0}
  ssid="$WPA_SUPPLICANT_SSID"
  psk="$WPA_SUPPLICANT_PSK"
}
CONFIG
fi

# dump config file
if [ "$WPA_SUPPLICANT_DUMPCONF" = "1" -o "$WPA_SUPPLICANT_DUMPCONF" = "yes" -o "$WPA_SUPPLICANT_DUMPCONF" = "enabled" ]; then
  log_warning_msg "found kernel parameter 'wpa_supplicant.dumpconf=$WPA_SUPPLICANT_DUMPCONF', dump of config file /etc/wpa_supplicant.conf follows"
  echo >&2
  echo "----------------------------------------" >&2
  cat /etc/wpa_supplicant.conf >&2
  echo "----------------------------------------" >&2
  echo >&2
fi

# check if debugging is enabled
if [ "$WPA_SUPPLICANT_DEBUG" = "1" -o "$WPA_SUPPLICANT_DEBUG" = "2" -o "$WPA_SUPPLICANT_DEBUG" = "3" -o "$WPA_SUPPLICANT_DEBUG" = "yes" -o "$WPA_SUPPLICANT_DEBUG" = "enabled" ]; then
  case "$WPA_SUPPLICANT_DEBUG" in
    3) DEBUG='-ddd' ;;
    2) DEBUG='-dd' ;;
    *) DEBUG='-d' ;;
  esac
  log_warning_msg "found kernel parameter 'wpa_supplicant.debug=$WPA_SUPPLICANT_DEBUG', wpa_supplicant will be started with '$DEBUG' as additional argument"
fi

# used for the interface name
INTERFACE=

# detect wireless network interface
if [ -n "$INITRAMFS_WIFI" ]; then # EXAMPLE: initramfs-wifi=wlan0
  if [ -e /sys/class/net/$INITRAMFS_WIFI/wireless ]; then
    INTERFACE=$INITRAMFS_WIFI
  else
    log_failure_msg "the 'initramfs-wifi' kernel parameter value '$INITRAMFS_WIFI' is not the name of a wireless network interface"
    exit 0
  fi
elif [ -n "$WPA_SUPPLICANT_INTERFACE" ]; then # EXAMPLE wpa_supplicant.interface=wlan0
  if [ -e "/sys/class/net/$WPA_SUPPLICANT_INTERFACE/wireless" ]; then
    INTERFACE="$WPA_SUPPLICANT_INTERFACE"
  else
    log_failure_msg "the 'wpa_supplicant.interface' kernel parameter value '$WPA_SUPPLICANT_INTERFACE' is not the name of a wireless network interface"
    exit 0
  fi
else
  for DEVICE in /sys/class/net/*; do
    if [ -e "$DEVICE/device" ]; then
      if [ -e "$DEVICE/wireless" ]; then
        INTERFACE="${DEVICE##*/}"
        break
      fi
    fi
  done
fi

# exit if there is no wireless interface
if [ -z "$INTERFACE" ]; then
  log_failure_msg "no wireless network interface found, did you configure '/etc/initramfs-wifi/initramfs.conf' and run 'update-initramfs -v -u -k all' ?"
  exit 0
fi

# check wait timeout in kernel cmdline
if [ -n "$WPA_SUPPLICANT_TIMEOUT" -a -z "${WPA_SUPPLICANT_TIMEOUT##*[!0-9]*}" ]; then
  log_failure_msg "the kernel parameter 'wpa_supplicant.timeout' contains the non-numeric value '$WPA_SUPPLICANT_TIMEOUT'"
  exit 0
fi

# define wait timeout
LIMIT=${WPA_SUPPLICANT_TIMEOUT:-30}

# create wpa_cli alias
alias wpa_state_completed="wpa_cli status -p/run/wpa_supplicant -i$INTERFACE 2>/dev/null | grep -qxF wpa_state=COMPLETED"

# clean wpa_supplicant
rm -fr \
  /run/wpa_supplicant \
  /run/wpa_supplicant.log \
  /run/wpa_supplicant.err \
  /run/wpa_supplicant.pid

# start wpa_supplicant
wpa_supplicant \
  -B -i$INTERFACE $DEBUG \
  -c/etc/wpa_supplicant.conf \
  -P/run/wpa_supplicant.pid \
  -f/run/wpa_supplicant.log \
  1>/run/wpa_supplicant.err  \
  2>&1

EXIT_STATUS=$?

if [ $EXIT_STATUS -ne 0 ]; then
  log_failure_msg "wpa_supplicant failed with exit status '$EXIT_STATUS', probably an error in the config file"
  exit 0
fi

# waiting $LIMIT seconds for wpa_state=COMPLETED
while [ $LIMIT -gt 0 ] && ! wpa_state_completed; do
  sleep 1
  echo -n "+"
  LIMIT=$(( LIMIT - 1 ))
done
echo -n " "

# dump logs
if [ "$WPA_SUPPLICANT_DUMPLOGS" = "1" -o "$WPA_SUPPLICANT_DUMPLOGS" = "yes" -o "$WPA_SUPPLICANT_DUMPLOGS" = "enabled" ]; then
  log_warning_msg "found kernel parameter 'wpa_supplicant.dumplogs=$WPA_SUPPLICANT_DUMPLOGS', dump of log file /run/wpa_supplicant.log and /run/wpa_supplicant.err follows"
  echo >&2
  echo "----------------------------------------" >&2
  tail -n 50 /run/wpa_supplicant.log /run/wpa_supplicant.err >&2
  echo "----------------------------------------" >&2
  echo >&2
fi

# check wpa_supplicant status
if ! wpa_state_completed; then
  if ! STDERR=$( wpa_cli terminate -p/run/wpa_supplicant -i$INTERFACE 2>&1 ); then
    log_failure_msg "wpa_supplicant is not running after $LIMIT seconds and could not be terminated [REASON: $STDERR], did you configure '/etc/initramfs-wifi/wpa_supplicant.conf' and run 'update-initramfs -v -u -k all' ?"
  else
    log_failure_msg "wpa_supplicant is not running after $LIMIT seconds and was terminated [RESULT: $STDERR], did you configure '/etc/initramfs-wifi/wpa_supplicant.conf' and run 'update-initramfs -v -u -k all' ?"
  fi
  ip link set $INTERFACE down 2>/dev/null
else
  log_success_msg "wpa_supplicant is running (Interface: $INTERFACE)"
fi

